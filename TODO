
next release:
quoted identifiers: implement as a dot operator
review tests to copy from hssqlppp
window frames and named windows
dialect framework
try to implement fixity without the hse hack
position annotation?
row ctor
more symbolic operators, array access a[5]?
review abstract syntax (e.g. combine App with SpecialOp?)
more dots
order by nulls first/last
extend case
group by extensions
table, values
collate? -> postfix operator which binds very  tightly:
a < 'foo' collate 'C'
->
Op "<" [Iden "a", SpecialOp "collate" [StringLit 'foo', StringLit
   'C']]
  also postfix in order by:
select a from t order by a collate 'C': add to order by syntax
function table reference
much more table reference tests
ansi standard versions of limit and offset
sql server top
add to website: pretty printed tpch, maybe other queries as
   demonstration
demo: convert tpch to sql server syntax
review internal sql collection for more syntax/tests
run through postgres docs and add example sql as tests

----

Later general tasks:

check the order of exports, imports and functions/cases in the files
fix up the import namespaces/explicit names nicely

do some tests for parse errors?

dialect switching

left factor parsing code in remaining places

reimplement the fixity thing natively

position annotation?

quasi quotes?

= sql support

scalar function syntax:

  review all ansi sql operators
  placeholder/positional arg

other missing operators
  row constructors -> needed for stuff like
  'where (a,b) = any (select a,b from t)'


review allowed identifier syntax
  add quoted identifiers
more dots in identifiers
order by nulls first/last
extend case
escapes in string literals
full number literals -> other bases?
group by (), grouping sets(), cube, rollup
lateral
named windows
table, values
apply, pivot
collate
within group aggregate syntax

support the ansi version for limit and offset, plus review other
   dialects

try to do full review of sql2003 query syntax

make ansi dialect which only supports ansi sql. Maybe there is a use
   for a separate SQL 92, 99 and 2003 dialects?

other dialect targets:
postgres
oracle
teradata
ms sql server
mysql?
db2?

maybe later: other dml
