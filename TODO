= next release

Most important goal is to replace the fixity code and fix all the
   bugs here.

== docs

add to website: pretty printed tpch, maybe other queries as
   demonstration

add preamble to the rendered test page

add links from the supported sql page to the rendered test page for
   each section -> have to section up the tests some more

== testing

review tests to copy from hssqlppp

much more table reference tests, for joins and aliases etc.?

review internal sql collection for more syntax/tests

== features

collate? -> postfix operator which binds very tightly:
a < 'foo' collate 'C'
->
Op "<" [Iden "a", SpecialOp "collate" [StringLit 'foo', StringLit
   'C']]
  also postfix in order by:
select a from t order by a collate 'C': add to order by syntax, one
   collation per column
have to do fixity for this to work

all ansi string literal syntax?

check ansi standard for operators (keywords and symbols)

== other

change any/some/all to be proper infix operators like in

review syntax to replace maybe and bool with better ctors
maybe review some of the dodgy ast names like orderfield and inthing



= Later general tasks:

demo program: convert tpch to sql server syntax exe processor

dialect framework
try to implement fixity without the hse hack
source position annotation?
review abstract syntax (e.g. combine App with SpecialOp?)

more operators

sql server top syntax

named windows

extended string literals, escapes and other flavours (like pg and
   oracle custom delimiters)

run through other manuals for example queries and features: sql in a
   nutshell, sql guide, sql reference guide, sql standard, sql server
   manual, oracle manual, teradata manual + re-through postgresql
   manual and make notes in each case of all syntax and which isn't
   currently supported also.

check the order of exports, imports and functions/cases in the files
fix up the import namespaces/explicit names nicely

do some tests for parse errors?

left factor parsing code in remaining places

quasi quotes?

ast checker: checks the ast represents valid syntax, the parser
   doesn't check as much as it could, and this can also be used to
   check generated trees. Maybe this doesn't belong in this package
   though?

= sql support

proper character sets for identifiers, escapes, etc.

placeholder/positional arg

full number literals -> other bases?
apply, pivot
within group aggregate syntax

try to do full review of sql2003 query syntax

make ansi dialect which only supports ansi sql. Maybe there is a use
   for a separate SQL 92, 99 and 2003 dialects?

other dialect targets:
postgres
oracle
teradata
ms sql server
mysql?
db2?

maybe later: other dml
  insert, update, delete, truncate, merge + set, show?
  copy, execute?, explain?, begin/end/rollback?
